cmake_minimum_required(VERSION 3.8)
project(rpi_cpp_hardware)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# Find all required packages
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
# REQUIRED for custom message generation
find_package(rosidl_default_generators REQUIRED) 

# Print the current working directory (where this CMakeLists.txt is located)
message("Current Source Directory: ${CMAKE_CURRENT_SOURCE_DIR}")

# Print the top-level project source directory
message("Top-Level Source Directory: ${CMAKE_SOURCE_DIR}")

# Print the current directory for build files
# message(STATUS "Current Binary Directory: ${CMAKE_CURRENT_BINARY_DIR}")
message("Current Binary Directory: ${CMAKE_CURRENT_BINARY_DIR}")


# --- Custom Message Configuration Start ---
set(
  MSG_FILES
  "${CMAKE_CURRENT_SOURCE_DIR}:msg/RpiSensorData.msg" # <-- THIS LINE IS CRITICAL: Ensures the correct path is used
)

# Generates the C++ (and other language) interfaces from the .msg file
rosidl_generate_interfaces(
  ${PROJECT_NAME}
  ${MSG_FILES}
  DEPENDENCIES std_msgs # Depends on std_msgs/Header
)

# Export the runtime dependency so other packages can use the generated message
ament_export_dependencies(rosidl_default_runtime)

install(
  FILES ${MSG_FILES}
  DESTINATION share/${PROJECT_NAME}/msg
)
# --- Custom Message Configuration End ---

# Example C++ executable setup (assuming you have a publisher)
add_executable(rpi_publisher src/rpi_publisher.cpp)
ament_target_dependencies(rpi_publisher rclcpp std_msgs "${PROJECT_NAME}")

# Link against the target generated by rosidl_generate_interfaces
if(BUILD_TESTING)
  ament_target_dependencies(rpi_publisher rosidl_runtime_c)
  target_link_libraries(rpi_publisher 
    rosidl_runtime_c::rpi_cpp_hardware_msg_typesupport_c 
    rosidl_runtime_cpp::rpi_cpp_hardware_msg_typesupport_cpp
  )
else()
  target_link_libraries(rpi_publisher 
    rosidl_runtime_cpp::rpi_cpp_hardware_msg_typesupport_cpp
  )
endif()

install(TARGETS
  rpi_publisher
  DESTINATION lib/${PROJECT_NAME}
)

ament_package()
